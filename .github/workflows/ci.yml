name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '20'

jobs:
  backend-check:
    name: Backend Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: monstera_test
          POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C.UTF-8"
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d monstera_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        cd backend
        go mod download
    
    - name: Run go vet
      run: |
        cd backend
        go vet ./...
    
    - name: Run go fmt check
      run: |
        cd backend
        if [ -n "$(go fmt ./...)" ]; then
          echo "Go code is not formatted. Please run 'go fmt ./...'"
          exit 1
        fi
    
    - name: Build
      run: |
        cd backend
        go build -v ./...
    
    - name: Run tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: monstera_test
        DB_DRIVER: postgres
        DB_SSLMODE: disable
        JWT_SECRET: test-secret-key
        ENV: test
      run: |
        cd backend
        go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-coverage
        path: backend/coverage.out

  frontend-check:
    name: Frontend Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Type check
      run: |
        cd frontend
        npx tsc --noEmit
    
    - name: Build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8080
      run: |
        cd frontend
        npm run build
    
    - name: Check build output
      run: |
        cd frontend
        if [ ! -d ".next" ]; then
          echo "Build failed: .next directory not found"
          exit 1
        fi

  docker-build:
    name: Docker Build Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        push: false
        tags: monstera-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        push: false
        tags: monstera-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [backend-check, frontend-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create .env file
      run: cp .env.example .env
    
    - name: Start services
      run: |
        docker-compose up -d
        echo "Waiting for services to be ready..."
        sleep 30
    
    - name: Check service health
      run: |
        # Check if backend is responding
        curl -f http://localhost:8080/health || exit 1
        
        # Check if frontend is responding
        curl -f http://localhost:3000 || exit 1
        
        # Check if PostgreSQL is responding
        docker-compose exec -T postgres pg_isready -U postgres -d monstera || exit 1
    
    - name: Run API tests
      run: |
        chmod +x ./scripts/test_api.sh
        ./scripts/test_api.sh || true  # 現在はエラーを無視（テストが未実装のため）
    
    - name: Stop services
      if: always()
      run: docker-compose down -v