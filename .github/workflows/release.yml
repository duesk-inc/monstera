name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'

jobs:
  # ビルドとテスト
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          go mod download
          go mod verify

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run backend tests
        working-directory: ./backend
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go vet ./...

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          npm run lint
          npm run type-check
          npm test -- --coverage --watchAll=false

      - name: Build backend
        working-directory: ./backend
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s -X main.version=${{ github.event.inputs.version || github.ref_name }}" -o bin/server cmd/server/main.go

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: backend/bin/server
          retention-days: 7

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 7

  # Dockerイメージのビルドとプッシュ
  build-docker-images:
    name: Build Docker Images
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.event.inputs.version || github.ref_name }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
            COMMIT_SHA=${{ github.sha }}

  # データベースマイグレーション
  database-migration:
    name: Database Migration
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || contains(github.ref, 'rc') || contains(github.ref, 'beta')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install migrate tool
        run: |
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

      - name: Run migrations (Staging)
        if: github.event.inputs.environment == 'staging'
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          migrate -path ./backend/migrations -database "$DATABASE_URL" up

      - name: Verify migration
        if: github.event.inputs.environment == 'staging'
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          migrate -path ./backend/migrations -database "$DATABASE_URL" version

  # ステージング環境へのデプロイ
  deploy-staging:
    name: Deploy to Staging
    needs: [build-docker-images, database-migration]
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || contains(github.ref, 'rc') || contains(github.ref, 'beta')
    environment:
      name: staging
      url: https://staging.monstera.example.com
    steps:
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # ここに実際のデプロイコマンドを追加
          # 例: kubectl apply, AWS ECS update-service, etc.

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # ここにスモークテストのコマンドを追加

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging deployment ${{ job.status }}
            Version: ${{ github.event.inputs.version || github.ref_name }}
            Actor: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 本番環境へのデプロイ
  deploy-production:
    name: Deploy to Production
    needs: [build-docker-images, deploy-staging]
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    environment:
      name: production
      url: https://monstera.example.com
    steps:
      - name: Backup production database
        run: |
          echo "Backing up production database..."
          # ここにバックアップコマンドを追加

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # ここに実際のデプロイコマンドを追加

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # ここにヘルスチェックのコマンドを追加

      - name: Create GitHub Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          draft: false
          prerelease: contains(github.ref, 'rc') || contains(github.ref, 'beta')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}
            Version: ${{ github.event.inputs.version || github.ref_name }}
            Actor: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ロールバック用ジョブ
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          # ここにロールバックコマンドを追加

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: |
            Deployment rolled back
            Version: ${{ github.event.inputs.version || github.ref_name }}
            Reason: Deployment failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}