name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # ÊØéÊó•ÂçàÂâç3ÊôÇÔºàJSTÔºâ„Å´ÂÆüË°å
    - cron: '0 18 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '20'

permissions:
  contents: read
  security-events: write

jobs:
  go-security:
    name: Go Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      run: |
        cd backend
        govulncheck -format json ./... > govuln-results.json || true
        
    - name: Display Go vulnerabilities
      if: always()
      run: |
        cd backend
        if [ -f govuln-results.json ]; then
          echo "::warning::Go Security Vulnerabilities Found"
          govulncheck ./... || true
        fi

    - name: Upload Go vulnerability results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: go-vulnerability-results
        path: backend/govuln-results.json

  npm-security:
    name: NPM Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --json > npm-audit-results.json || true
        
    - name: Display npm vulnerabilities
      if: always()
      run: |
        cd frontend
        npm audit || true

    - name: Check for high severity vulnerabilities
      run: |
        cd frontend
        # È´ò„ÉªÈáçÂ§ß„Å™ËÑÜÂº±ÊÄß„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÂ§±Êïó
        if npm audit --production --audit-level=high; then
          echo "No high or critical vulnerabilities found"
        else
          echo "::error::High or critical vulnerabilities found in npm dependencies"
          exit 1
        fi

    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-results
        path: frontend/npm-audit-results.json

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # ÂÖ®Â±•Ê≠¥„ÇíÂèñÂæó„Åó„Å¶„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÅÆÊºèÊ¥©„ÇíÊ§úÂá∫

    - name: Run gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-security:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./${{ matrix.service }}
        push: false
        tags: monstera-${{ matrix.service }}:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/${{ matrix.service }}.tar

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        input: /tmp/${{ matrix.service }}.tar
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  # ËÑÜÂº±ÊÄß„ÅåË¶ã„Å§„Åã„Å£„Å¶„ÇÇ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅØÁ∂ôÁ∂ö

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'
        category: 'docker-${{ matrix.service }}'

    - name: Run Trivy in table format
      uses: aquasecurity/trivy-action@master
      if: always()
      with:
        input: /tmp/${{ matrix.service }}.tar
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'  # CRITICAL„Å™ËÑÜÂº±ÊÄß„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÂ§±Êïó

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: high
        deny-licenses: GPL-3.0, AGPL-3.0

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [go-security, npm-security, secret-scanning, docker-security]
    if: always()
    steps:
    - name: Create security summary
      run: |
        echo "## üîí Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "| Check | Status |" >> security-summary.md
        echo "|-------|--------|" >> security-summary.md
        
        # ÂêÑ„Ç∏„Éß„Éñ„ÅÆÁµêÊûú„ÇíÁ¢∫Ë™ç
        if [ "${{ needs.go-security.result }}" == "success" ]; then
          echo "| Go Security | ‚úÖ Passed |" >> security-summary.md
        else
          echo "| Go Security | ‚ùå Failed |" >> security-summary.md
        fi
        
        if [ "${{ needs.npm-security.result }}" == "success" ]; then
          echo "| NPM Security | ‚úÖ Passed |" >> security-summary.md
        else
          echo "| NPM Security | ‚ùå Failed |" >> security-summary.md
        fi
        
        if [ "${{ needs.secret-scanning.result }}" == "success" ]; then
          echo "| Secret Scanning | ‚úÖ Passed |" >> security-summary.md
        else
          echo "| Secret Scanning | ‚ùå Failed |" >> security-summary.md
        fi
        
        if [ "${{ needs.docker-security.result }}" == "success" ]; then
          echo "| Docker Security | ‚úÖ Passed |" >> security-summary.md
        else
          echo "| Docker Security | ‚ùå Failed |" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "üîç Ë©≥Á¥∞„Å™ÁµêÊûú„ÅØArtifacts„Å®Security Advisories„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ" >> security-summary.md
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment PR (if applicable)
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          // Êó¢Â≠ò„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç≥„É°„É≥„Éà„ÇíÊé¢„Åô
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Security Scan Summary')
          );
          
          if (botComment) {
            // Êó¢Â≠ò„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÊõ¥Êñ∞
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: summary
            });
          } else {
            // Êñ∞Ë¶è„Ç≥„É°„É≥„Éà„Çí‰ΩúÊàê
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
          }