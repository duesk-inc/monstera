# Monstera プロジェクト 環境変数テンプレート
# このファイルをコピーして .env ファイルを作成し、実際の値に変更してください
# セキュリティ上重要: 本番環境では強力なパスワードとシークレットキーを使用してください

# =============================================================================
# バックエンドサーバー設定
# =============================================================================

# サーバーポート設定
SERVER_PORT=8080

# タイムアウト設定（秒）
SERVER_READ_TIMEOUT=30
SERVER_WRITE_TIMEOUT=30

# =============================================================================
# データベース設定（PostgreSQL移行対応）
# =============================================================================

# データベースドライバー（postgres, mysql）
DB_DRIVER=postgres

# データベース接続情報
DB_HOST=localhost
DB_PORT=5432
DB_USER=monstera_app
DB_PASSWORD=app_password_change_in_production
DB_NAME=monstera

# SSL/TLS設定
DB_SSL_MODE=prefer
DB_REQUIRE_SSL=false
DB_MIN_TLS_VERSION=1.2
DB_CONNECT_TIMEOUT=30

# SSL証明書設定（ファイルパス - 本番環境推奨）
# DB_SSL_CERT_FILE=/etc/ssl/certs/client-cert.pem
# DB_SSL_KEY_FILE=/etc/ssl/private/client-key.pem
# DB_SSL_ROOT_CERT_FILE=/etc/ssl/certs/ca-cert.pem

# SSL証明書設定（環境変数 - Docker/クラウド環境用）
# DB_SSL_CERT=-----BEGIN CERTIFICATE-----...
# DB_SSL_KEY=-----BEGIN PRIVATE KEY-----...
# DB_SSL_ROOT_CERT=-----BEGIN CERTIFICATE-----...

# PostgreSQL管理ユーザー設定（Docker環境用）
POSTGRES_PASSWORD=postgres_admin_password

# 読み取り専用ユーザー設定（レポート・分析用）
DB_READONLY_USER=monstera_readonly
DB_READONLY_PASSWORD=readonly_password

# MySQL設定（互換性維持用 - 段階的移行時）
# DB_MYSQL_HOST=localhost
# DB_MYSQL_PORT=3306
# DB_MYSQL_USER=monstera
# DB_MYSQL_PASSWORD=password
# DB_ROOT_PASSWORD=root

# =============================================================================
# JWT認証設定
# =============================================================================

# JWT シークレットキー（本番環境では32文字以上のランダム文字列を使用）
JWT_SECRET=monstera_secret_key_change_in_production

# JWT トークン有効期限（分）
JWT_ACCESS_TOKEN_EXP=15
JWT_REFRESH_TOKEN_EXP=10080

# JWT クッキー名
JWT_ACCESS_COOKIE_NAME=access_token
JWT_REFRESH_COOKIE_NAME=refresh_token

# =============================================================================
# CORS設定
# =============================================================================

# 許可するオリジン（カンマ区切りで複数指定可能）
CORS_ALLOW_ORIGINS=http://localhost:3000

# プリフライトリクエストのキャッシュ時間（秒）
CORS_MAX_AGE=300

# =============================================================================
# ログ設定
# =============================================================================

# ログレベル: debug, info, warn, error
LOG_LEVEL=info

# =============================================================================
# フロントエンド設定
# =============================================================================

# フロントエンドポート
FRONTEND_PORT=3000

# API URL（フロントエンドから参照）
API_PORT=8080

# Next.js 環境設定
NODE_ENV=development
NEXT_TELEMETRY_DISABLED=1

# 開発環境用（ファイル変更監視）
CHOKIDAR_USEPOLLING=true
WATCHPACK_POLLING=true

# =============================================================================
# 外部サービス設定（必要に応じて追加）
# =============================================================================

# システムURL（通知メール・Slackメッセージ内のリンク用）
SYSTEM_URL=http://localhost:3000

# メール送信サービス設定
EMAIL_ENABLED=false
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USERNAME=your-email@gmail.com
EMAIL_PASSWORD=your-app-password
EMAIL_FROM=noreply@monstera.com
EMAIL_FROM_NAME=Monstera System

# Slack通知設定
SLACK_ENABLED=false
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL
SLACK_DEFAULT_CHANNEL=#general
SLACK_ICON_URL=https://example.com/monstera-icon.png

# 管理者通知設定（カンマ区切りで複数指定可能）
ADMIN_EMAILS=admin1@duesk.co.jp,admin2@duesk.co.jp
ADMIN_SLACK_CHANNEL=#admin-alerts

# =============================================================================
# MinIO設定（ローカル開発用S3互換ストレージ）
# =============================================================================

# MinIO認証情報
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=minioadmin_change_in_production

# MinIOポート設定
MINIO_PORT=9000
MINIO_CONSOLE_PORT=9001

# デフォルトバケット名
MINIO_DEFAULT_BUCKETS=monstera-files

# S3互換設定
AWS_S3_ENDPOINT=http://minio:9000
AWS_S3_BUCKET_NAME=monstera-files
AWS_REGION=us-east-1
AWS_S3_BASE_URL=http://localhost:9000/monstera-files
AWS_S3_PATH_STYLE=true
AWS_S3_DISABLE_SSL=true

# 開発環境でのS3サービス設定
USE_MOCK_S3=false  # MinIOを使用する場合はfalseに設定

# ファイルストレージ（本番環境：AWS S3）
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key
# AWS_REGION=ap-northeast-1
# AWS_BUCKET=monstera-files

# =============================================================================
# 開発・デバッグ設定
# =============================================================================

# デバッグモード
DEBUG=false

# Go 環境設定
GO_ENV=development

# ウイルススキャン無効化（開発環境のみ - 本番環境では絶対に使用しないこと）
# ClamAVサービスが利用できない開発環境でのみ使用
# DISABLE_VIRUS_SCAN=true

# =============================================================================
# セキュリティ設定
# =============================================================================

# HTTPS強制（本番環境推奨）
FORCE_HTTPS=false

# セッション設定
SESSION_SECURE=false
SESSION_SAME_SITE=lax

# =============================================================================
# パフォーマンス設定（PostgreSQL最適化）
# =============================================================================

# データベース接続プール（PostgreSQL推奨値）
DB_MAX_IDLE_CONNS=5
DB_MAX_OPEN_CONNS=50
DB_CONN_MAX_LIFETIME=1800
DB_CONN_MAX_IDLE_TIME=600

# MySQL互換性設定（段階的移行用）
# DB_MYSQL_MAX_IDLE_CONNS=10
# DB_MYSQL_MAX_OPEN_CONNS=100
# DB_MYSQL_CONN_MAX_LIFETIME=3600

# =============================================================================
# モニタリング・監視設定（本番環境用）
# =============================================================================

# APM設定（例：New Relic、Datadogなど）
# NEW_RELIC_LICENSE_KEY=your-license-key
# NEW_RELIC_APP_NAME=Monstera-Backend

# ヘルスチェック設定
HEALTH_CHECK_ENABLED=true

# =============================================================================
# PDF生成設定（Chrome headless）
# =============================================================================

# Chrome実行パス（Dockerコンテナ内）
CHROME_PATH=/usr/bin/google-chrome

# PDF生成タイムアウト（秒）
PDF_GENERATION_TIMEOUT=30

# HTMLテンプレートディレクトリ
TEMPLATE_DIR=/app/templates

# =============================================================================
# 備考
# =============================================================================
# 
# 1. このファイルは Git で管理されており、実際の認証情報は含まれていません
# 2. .env ファイルは .gitignore に追加されており、Git 管理対象外です
# 3. 本番環境では必ず強力なパスワードとシークレットキーを設定してください
# 4. DB_PASSWORD, JWT_SECRET は特にセキュリティ上重要です
# 5. 環境別に設定を変更する場合は、それぞれの .env ファイルを作成してください
#    - .env.development （開発環境）
#    - .env.staging     （ステージング環境）
#    - .env.production  （本番環境）