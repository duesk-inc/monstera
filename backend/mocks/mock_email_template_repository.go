// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/email_template_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/duesk/monstera/internal/model"
	repository "github.com/duesk/monstera/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockEmailTemplateRepository is a mock of EmailTemplateRepository interface.
type MockEmailTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailTemplateRepositoryMockRecorder
}

// MockEmailTemplateRepositoryMockRecorder is the mock recorder for MockEmailTemplateRepository.
type MockEmailTemplateRepositoryMockRecorder struct {
	mock *MockEmailTemplateRepository
}

// NewMockEmailTemplateRepository creates a new mock instance.
func NewMockEmailTemplateRepository(ctrl *gomock.Controller) *MockEmailTemplateRepository {
	mock := &MockEmailTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockEmailTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailTemplateRepository) EXPECT() *MockEmailTemplateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmailTemplateRepository) Create(ctx context.Context, template *model.EmailTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEmailTemplateRepositoryMockRecorder) Create(ctx, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmailTemplateRepository)(nil).Create), ctx, template)
}

// Delete mocks base method.
func (m *MockEmailTemplateRepository) Delete(ctx context.Context, id, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmailTemplateRepositoryMockRecorder) Delete(ctx, id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmailTemplateRepository)(nil).Delete), ctx, id, deletedBy)
}

// GetActiveTemplates mocks base method.
func (m *MockEmailTemplateRepository) GetActiveTemplates(ctx context.Context) ([]model.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTemplates", ctx)
	ret0, _ := ret[0].([]model.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveTemplates indicates an expected call of GetActiveTemplates.
func (mr *MockEmailTemplateRepositoryMockRecorder) GetActiveTemplates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTemplates", reflect.TypeOf((*MockEmailTemplateRepository)(nil).GetActiveTemplates), ctx)
}

// GetByCategory mocks base method.
func (m *MockEmailTemplateRepository) GetByCategory(ctx context.Context, category string) (*model.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, category)
	ret0, _ := ret[0].(*model.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockEmailTemplateRepositoryMockRecorder) GetByCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockEmailTemplateRepository)(nil).GetByCategory), ctx, category)
}

// GetByID mocks base method.
func (m *MockEmailTemplateRepository) GetByID(ctx context.Context, id string) (*model.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEmailTemplateRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEmailTemplateRepository)(nil).GetByID), ctx, id)
}

// GetList mocks base method.
func (m *MockEmailTemplateRepository) GetList(ctx context.Context, filter repository.EmailTemplateFilter) ([]model.EmailTemplate, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter)
	ret0, _ := ret[0].([]model.EmailTemplate)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockEmailTemplateRepositoryMockRecorder) GetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockEmailTemplateRepository)(nil).GetList), ctx, filter)
}

// GetTemplatesByCreator mocks base method.
func (m *MockEmailTemplateRepository) GetTemplatesByCreator(ctx context.Context, createdBy string) ([]model.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplatesByCreator", ctx, createdBy)
	ret0, _ := ret[0].([]model.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplatesByCreator indicates an expected call of GetTemplatesByCreator.
func (mr *MockEmailTemplateRepositoryMockRecorder) GetTemplatesByCreator(ctx, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplatesByCreator", reflect.TypeOf((*MockEmailTemplateRepository)(nil).GetTemplatesByCreator), ctx, createdBy)
}

// SearchByName mocks base method.
func (m *MockEmailTemplateRepository) SearchByName(ctx context.Context, name string) ([]model.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", ctx, name)
	ret0, _ := ret[0].([]model.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockEmailTemplateRepositoryMockRecorder) SearchByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockEmailTemplateRepository)(nil).SearchByName), ctx, name)
}

// ToggleActive mocks base method.
func (m *MockEmailTemplateRepository) ToggleActive(ctx context.Context, id string, isActive bool, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleActive", ctx, id, isActive, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToggleActive indicates an expected call of ToggleActive.
func (mr *MockEmailTemplateRepositoryMockRecorder) ToggleActive(ctx, id, isActive, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleActive", reflect.TypeOf((*MockEmailTemplateRepository)(nil).ToggleActive), ctx, id, isActive, updatedBy)
}

// Update mocks base method.
func (m *MockEmailTemplateRepository) Update(ctx context.Context, template *model.EmailTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEmailTemplateRepositoryMockRecorder) Update(ctx, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmailTemplateRepository)(nil).Update), ctx, template)
}
