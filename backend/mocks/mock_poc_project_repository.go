// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/poc_project_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/duesk/monstera/internal/model"
	repository "github.com/duesk/monstera/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockPocProjectRepository is a mock of PocProjectRepository interface.
type MockPocProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPocProjectRepositoryMockRecorder
}

// MockPocProjectRepositoryMockRecorder is the mock recorder for MockPocProjectRepository.
type MockPocProjectRepositoryMockRecorder struct {
	mock *MockPocProjectRepository
}

// NewMockPocProjectRepository creates a new mock instance.
func NewMockPocProjectRepository(ctrl *gomock.Controller) *MockPocProjectRepository {
	mock := &MockPocProjectRepository{ctrl: ctrl}
	mock.recorder = &MockPocProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPocProjectRepository) EXPECT() *MockPocProjectRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPocProjectRepository) Create(ctx context.Context, project *model.PocProject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPocProjectRepositoryMockRecorder) Create(ctx, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPocProjectRepository)(nil).Create), ctx, project)
}

// Delete mocks base method.
func (m *MockPocProjectRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPocProjectRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPocProjectRepository)(nil).Delete), ctx, id)
}

// GetByExternalID mocks base method.
func (m *MockPocProjectRepository) GetByExternalID(ctx context.Context, externalID string) (*model.PocProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExternalID", ctx, externalID)
	ret0, _ := ret[0].(*model.PocProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExternalID indicates an expected call of GetByExternalID.
func (mr *MockPocProjectRepositoryMockRecorder) GetByExternalID(ctx, externalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExternalID", reflect.TypeOf((*MockPocProjectRepository)(nil).GetByExternalID), ctx, externalID)
}

// GetByID mocks base method.
func (m *MockPocProjectRepository) GetByID(ctx context.Context, id string) (*model.PocProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.PocProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPocProjectRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPocProjectRepository)(nil).GetByID), ctx, id)
}

// GetList mocks base method.
func (m *MockPocProjectRepository) GetList(ctx context.Context, filter repository.PocProjectFilter) ([]model.PocProject, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter)
	ret0, _ := ret[0].([]model.PocProject)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockPocProjectRepositoryMockRecorder) GetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockPocProjectRepository)(nil).GetList), ctx, filter)
}

// GetPendingSync mocks base method.
func (m *MockPocProjectRepository) GetPendingSync(ctx context.Context) ([]model.PocProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingSync", ctx)
	ret0, _ := ret[0].([]model.PocProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingSync indicates an expected call of GetPendingSync.
func (mr *MockPocProjectRepositoryMockRecorder) GetPendingSync(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingSync", reflect.TypeOf((*MockPocProjectRepository)(nil).GetPendingSync), ctx)
}

// GetRecentlySynced mocks base method.
func (m *MockPocProjectRepository) GetRecentlySynced(ctx context.Context, hours int) ([]model.PocProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentlySynced", ctx, hours)
	ret0, _ := ret[0].([]model.PocProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentlySynced indicates an expected call of GetRecentlySynced.
func (mr *MockPocProjectRepositoryMockRecorder) GetRecentlySynced(ctx, hours interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentlySynced", reflect.TypeOf((*MockPocProjectRepository)(nil).GetRecentlySynced), ctx, hours)
}

// Update mocks base method.
func (m *MockPocProjectRepository) Update(ctx context.Context, project *model.PocProject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPocProjectRepositoryMockRecorder) Update(ctx, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPocProjectRepository)(nil).Update), ctx, project)
}

// UpdateSyncStatus mocks base method.
func (m *MockPocProjectRepository) UpdateSyncStatus(ctx context.Context, id string, status model.PocSyncStatus, errorMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncStatus", ctx, id, status, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSyncStatus indicates an expected call of UpdateSyncStatus.
func (mr *MockPocProjectRepositoryMockRecorder) UpdateSyncStatus(ctx, id, status, errorMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncStatus", reflect.TypeOf((*MockPocProjectRepository)(nil).UpdateSyncStatus), ctx, id, status, errorMsg)
}
