// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/email_campaign_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/duesk/monstera/internal/model"
	repository "github.com/duesk/monstera/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockEmailCampaignRepository is a mock of EmailCampaignRepository interface.
type MockEmailCampaignRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailCampaignRepositoryMockRecorder
}

// MockEmailCampaignRepositoryMockRecorder is the mock recorder for MockEmailCampaignRepository.
type MockEmailCampaignRepositoryMockRecorder struct {
	mock *MockEmailCampaignRepository
}

// NewMockEmailCampaignRepository creates a new mock instance.
func NewMockEmailCampaignRepository(ctrl *gomock.Controller) *MockEmailCampaignRepository {
	mock := &MockEmailCampaignRepository{ctrl: ctrl}
	mock.recorder = &MockEmailCampaignRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailCampaignRepository) EXPECT() *MockEmailCampaignRepositoryMockRecorder {
	return m.recorder
}

// AddSentHistory mocks base method.
func (m *MockEmailCampaignRepository) AddSentHistory(ctx context.Context, history *model.EmailSentHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSentHistory", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSentHistory indicates an expected call of AddSentHistory.
func (mr *MockEmailCampaignRepositoryMockRecorder) AddSentHistory(ctx, history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSentHistory", reflect.TypeOf((*MockEmailCampaignRepository)(nil).AddSentHistory), ctx, history)
}

// Create mocks base method.
func (m *MockEmailCampaignRepository) Create(ctx context.Context, campaign *model.EmailCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEmailCampaignRepositoryMockRecorder) Create(ctx, campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmailCampaignRepository)(nil).Create), ctx, campaign)
}

// Delete mocks base method.
func (m *MockEmailCampaignRepository) Delete(ctx context.Context, id, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmailCampaignRepositoryMockRecorder) Delete(ctx, id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmailCampaignRepository)(nil).Delete), ctx, id, deletedBy)
}

// GetActiveCampaigns mocks base method.
func (m *MockEmailCampaignRepository) GetActiveCampaigns(ctx context.Context) ([]model.EmailCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCampaigns", ctx)
	ret0, _ := ret[0].([]model.EmailCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCampaigns indicates an expected call of GetActiveCampaigns.
func (mr *MockEmailCampaignRepositoryMockRecorder) GetActiveCampaigns(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCampaigns", reflect.TypeOf((*MockEmailCampaignRepository)(nil).GetActiveCampaigns), ctx)
}

// GetByID mocks base method.
func (m *MockEmailCampaignRepository) GetByID(ctx context.Context, id string) (*model.EmailCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.EmailCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEmailCampaignRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEmailCampaignRepository)(nil).GetByID), ctx, id)
}

// GetCampaignStats mocks base method.
func (m *MockEmailCampaignRepository) GetCampaignStats(ctx context.Context, id string) (*repository.CampaignStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignStats", ctx, id)
	ret0, _ := ret[0].(*repository.CampaignStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignStats indicates an expected call of GetCampaignStats.
func (mr *MockEmailCampaignRepositoryMockRecorder) GetCampaignStats(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignStats", reflect.TypeOf((*MockEmailCampaignRepository)(nil).GetCampaignStats), ctx, id)
}

// GetCampaignsByTemplate mocks base method.
func (m *MockEmailCampaignRepository) GetCampaignsByTemplate(ctx context.Context, templateID string) ([]model.EmailCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignsByTemplate", ctx, templateID)
	ret0, _ := ret[0].([]model.EmailCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignsByTemplate indicates an expected call of GetCampaignsByTemplate.
func (mr *MockEmailCampaignRepositoryMockRecorder) GetCampaignsByTemplate(ctx, templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignsByTemplate", reflect.TypeOf((*MockEmailCampaignRepository)(nil).GetCampaignsByTemplate), ctx, templateID)
}

// GetList mocks base method.
func (m *MockEmailCampaignRepository) GetList(ctx context.Context, filter repository.EmailCampaignFilter) ([]model.EmailCampaign, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter)
	ret0, _ := ret[0].([]model.EmailCampaign)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockEmailCampaignRepositoryMockRecorder) GetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockEmailCampaignRepository)(nil).GetList), ctx, filter)
}

// GetScheduledCampaigns mocks base method.
func (m *MockEmailCampaignRepository) GetScheduledCampaigns(ctx context.Context) ([]model.EmailCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledCampaigns", ctx)
	ret0, _ := ret[0].([]model.EmailCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledCampaigns indicates an expected call of GetScheduledCampaigns.
func (mr *MockEmailCampaignRepositoryMockRecorder) GetScheduledCampaigns(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledCampaigns", reflect.TypeOf((*MockEmailCampaignRepository)(nil).GetScheduledCampaigns), ctx)
}

// GetSentHistory mocks base method.
func (m *MockEmailCampaignRepository) GetSentHistory(ctx context.Context, campaignID string) ([]model.EmailSentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentHistory", ctx, campaignID)
	ret0, _ := ret[0].([]model.EmailSentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentHistory indicates an expected call of GetSentHistory.
func (mr *MockEmailCampaignRepositoryMockRecorder) GetSentHistory(ctx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentHistory", reflect.TypeOf((*MockEmailCampaignRepository)(nil).GetSentHistory), ctx, campaignID)
}

// Update mocks base method.
func (m *MockEmailCampaignRepository) Update(ctx context.Context, campaign *model.EmailCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEmailCampaignRepositoryMockRecorder) Update(ctx, campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmailCampaignRepository)(nil).Update), ctx, campaign)
}

// UpdateClickCount mocks base method.
func (m *MockEmailCampaignRepository) UpdateClickCount(ctx context.Context, id string, increment int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClickCount", ctx, id, increment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClickCount indicates an expected call of UpdateClickCount.
func (mr *MockEmailCampaignRepositoryMockRecorder) UpdateClickCount(ctx, id, increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClickCount", reflect.TypeOf((*MockEmailCampaignRepository)(nil).UpdateClickCount), ctx, id, increment)
}

// UpdateDeliveryStatus mocks base method.
func (m *MockEmailCampaignRepository) UpdateDeliveryStatus(ctx context.Context, historyID string, status model.DeliveryStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeliveryStatus", ctx, historyID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeliveryStatus indicates an expected call of UpdateDeliveryStatus.
func (mr *MockEmailCampaignRepositoryMockRecorder) UpdateDeliveryStatus(ctx, historyID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeliveryStatus", reflect.TypeOf((*MockEmailCampaignRepository)(nil).UpdateDeliveryStatus), ctx, historyID, status)
}

// UpdateOpenCount mocks base method.
func (m *MockEmailCampaignRepository) UpdateOpenCount(ctx context.Context, id string, increment int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOpenCount", ctx, id, increment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOpenCount indicates an expected call of UpdateOpenCount.
func (mr *MockEmailCampaignRepositoryMockRecorder) UpdateOpenCount(ctx, id, increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpenCount", reflect.TypeOf((*MockEmailCampaignRepository)(nil).UpdateOpenCount), ctx, id, increment)
}

// UpdateSentCount mocks base method.
func (m *MockEmailCampaignRepository) UpdateSentCount(ctx context.Context, id string, increment int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSentCount", ctx, id, increment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSentCount indicates an expected call of UpdateSentCount.
func (mr *MockEmailCampaignRepositoryMockRecorder) UpdateSentCount(ctx, id, increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSentCount", reflect.TypeOf((*MockEmailCampaignRepository)(nil).UpdateSentCount), ctx, id, increment)
}

// UpdateStatus mocks base method.
func (m *MockEmailCampaignRepository) UpdateStatus(ctx context.Context, id string, status model.CampaignStatus, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockEmailCampaignRepositoryMockRecorder) UpdateStatus(ctx, id, status, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockEmailCampaignRepository)(nil).UpdateStatus), ctx, id, status, updatedBy)
}
