// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/email_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailService is a mock of EmailService interface.
type MockEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceMockRecorder
}

// MockEmailServiceMockRecorder is the mock recorder for MockEmailService.
type MockEmailServiceMockRecorder struct {
	mock *MockEmailService
}

// NewMockEmailService creates a new mock instance.
func NewMockEmailService(ctrl *gomock.Controller) *MockEmailService {
	mock := &MockEmailService{ctrl: ctrl}
	mock.recorder = &MockEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailService) EXPECT() *MockEmailServiceMockRecorder {
	return m.recorder
}

// SendAdminNotification mocks base method.
func (m *MockEmailService) SendAdminNotification(ctx context.Context, to []string, subject, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAdminNotification", ctx, to, subject, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAdminNotification indicates an expected call of SendAdminNotification.
func (mr *MockEmailServiceMockRecorder) SendAdminNotification(ctx, to, subject, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAdminNotification", reflect.TypeOf((*MockEmailService)(nil).SendAdminNotification), ctx, to, subject, message)
}

// SendAlertNotification mocks base method.
func (m *MockEmailService) SendAlertNotification(ctx context.Context, to, alertType, severity, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAlertNotification", ctx, to, alertType, severity, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAlertNotification indicates an expected call of SendAlertNotification.
func (mr *MockEmailServiceMockRecorder) SendAlertNotification(ctx, to, alertType, severity, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlertNotification", reflect.TypeOf((*MockEmailService)(nil).SendAlertNotification), ctx, to, alertType, severity, message)
}

// SendEmail mocks base method.
func (m *MockEmailService) SendEmail(ctx context.Context, to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailServiceMockRecorder) SendEmail(ctx, to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailService)(nil).SendEmail), ctx, to, subject, body)
}

// SendHTMLEmail mocks base method.
func (m *MockEmailService) SendHTMLEmail(ctx context.Context, to []string, subject, htmlBody string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHTMLEmail", ctx, to, subject, htmlBody)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHTMLEmail indicates an expected call of SendHTMLEmail.
func (mr *MockEmailServiceMockRecorder) SendHTMLEmail(ctx, to, subject, htmlBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHTMLEmail", reflect.TypeOf((*MockEmailService)(nil).SendHTMLEmail), ctx, to, subject, htmlBody)
}

// SendTemplatedEmail mocks base method.
func (m *MockEmailService) SendTemplatedEmail(ctx context.Context, to []string, subject, templateName string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTemplatedEmail", ctx, to, subject, templateName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTemplatedEmail indicates an expected call of SendTemplatedEmail.
func (mr *MockEmailServiceMockRecorder) SendTemplatedEmail(ctx, to, subject, templateName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTemplatedEmail", reflect.TypeOf((*MockEmailService)(nil).SendTemplatedEmail), ctx, to, subject, templateName, data)
}

// SendWeeklyReportReminder mocks base method.
func (m *MockEmailService) SendWeeklyReportReminder(ctx context.Context, to, userName, weekStart, weekEnd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWeeklyReportReminder", ctx, to, userName, weekStart, weekEnd)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWeeklyReportReminder indicates an expected call of SendWeeklyReportReminder.
func (mr *MockEmailServiceMockRecorder) SendWeeklyReportReminder(ctx, to, userName, weekStart, weekEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWeeklyReportReminder", reflect.TypeOf((*MockEmailService)(nil).SendWeeklyReportReminder), ctx, to, userName, weekStart, weekEnd)
}

// SendWeeklyReportSubmittedNotice mocks base method.
func (m *MockEmailService) SendWeeklyReportSubmittedNotice(ctx context.Context, to, userName, weekStart, weekEnd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWeeklyReportSubmittedNotice", ctx, to, userName, weekStart, weekEnd)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWeeklyReportSubmittedNotice indicates an expected call of SendWeeklyReportSubmittedNotice.
func (mr *MockEmailServiceMockRecorder) SendWeeklyReportSubmittedNotice(ctx, to, userName, weekStart, weekEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWeeklyReportSubmittedNotice", reflect.TypeOf((*MockEmailService)(nil).SendWeeklyReportSubmittedNotice), ctx, to, userName, weekStart, weekEnd)
}
