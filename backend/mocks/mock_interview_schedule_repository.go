// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interview_schedule_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/duesk/monstera/internal/model"
	repository "github.com/duesk/monstera/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockInterviewScheduleRepository is a mock of InterviewScheduleRepository interface.
type MockInterviewScheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInterviewScheduleRepositoryMockRecorder
}

// MockInterviewScheduleRepositoryMockRecorder is the mock recorder for MockInterviewScheduleRepository.
type MockInterviewScheduleRepositoryMockRecorder struct {
	mock *MockInterviewScheduleRepository
}

// NewMockInterviewScheduleRepository creates a new mock instance.
func NewMockInterviewScheduleRepository(ctrl *gomock.Controller) *MockInterviewScheduleRepository {
	mock := &MockInterviewScheduleRepository{ctrl: ctrl}
	mock.recorder = &MockInterviewScheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterviewScheduleRepository) EXPECT() *MockInterviewScheduleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterviewScheduleRepository) Create(ctx context.Context, interview *model.InterviewSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, interview)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInterviewScheduleRepositoryMockRecorder) Create(ctx, interview interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterviewScheduleRepository)(nil).Create), ctx, interview)
}

// Delete mocks base method.
func (m *MockInterviewScheduleRepository) Delete(ctx context.Context, id, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInterviewScheduleRepositoryMockRecorder) Delete(ctx, id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterviewScheduleRepository)(nil).Delete), ctx, id, deletedBy)
}

// GetByID mocks base method.
func (m *MockInterviewScheduleRepository) GetByID(ctx context.Context, id string) (*model.InterviewSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.InterviewSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockInterviewScheduleRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockInterviewScheduleRepository)(nil).GetByID), ctx, id)
}

// GetByProposal mocks base method.
func (m *MockInterviewScheduleRepository) GetByProposal(ctx context.Context, proposalID string) ([]model.InterviewSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProposal", ctx, proposalID)
	ret0, _ := ret[0].([]model.InterviewSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProposal indicates an expected call of GetByProposal.
func (mr *MockInterviewScheduleRepositoryMockRecorder) GetByProposal(ctx, proposalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProposal", reflect.TypeOf((*MockInterviewScheduleRepository)(nil).GetByProposal), ctx, proposalID)
}

// GetList mocks base method.
func (m *MockInterviewScheduleRepository) GetList(ctx context.Context, filter repository.InterviewScheduleFilter) ([]model.InterviewSchedule, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter)
	ret0, _ := ret[0].([]model.InterviewSchedule)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockInterviewScheduleRepositoryMockRecorder) GetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockInterviewScheduleRepository)(nil).GetList), ctx, filter)
}

// GetTodayInterviews mocks base method.
func (m *MockInterviewScheduleRepository) GetTodayInterviews(ctx context.Context) ([]model.InterviewSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodayInterviews", ctx)
	ret0, _ := ret[0].([]model.InterviewSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodayInterviews indicates an expected call of GetTodayInterviews.
func (mr *MockInterviewScheduleRepositoryMockRecorder) GetTodayInterviews(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodayInterviews", reflect.TypeOf((*MockInterviewScheduleRepository)(nil).GetTodayInterviews), ctx)
}

// GetUpcomingInterviews mocks base method.
func (m *MockInterviewScheduleRepository) GetUpcomingInterviews(ctx context.Context, days int) ([]model.InterviewSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingInterviews", ctx, days)
	ret0, _ := ret[0].([]model.InterviewSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingInterviews indicates an expected call of GetUpcomingInterviews.
func (mr *MockInterviewScheduleRepositoryMockRecorder) GetUpcomingInterviews(ctx, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingInterviews", reflect.TypeOf((*MockInterviewScheduleRepository)(nil).GetUpcomingInterviews), ctx, days)
}

// Update mocks base method.
func (m *MockInterviewScheduleRepository) Update(ctx context.Context, interview *model.InterviewSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, interview)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInterviewScheduleRepositoryMockRecorder) Update(ctx, interview interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInterviewScheduleRepository)(nil).Update), ctx, interview)
}

// UpdateStatus mocks base method.
func (m *MockInterviewScheduleRepository) UpdateStatus(ctx context.Context, id string, status model.InterviewStatus, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockInterviewScheduleRepositoryMockRecorder) UpdateStatus(ctx, id, status, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockInterviewScheduleRepository)(nil).UpdateStatus), ctx, id, status, updatedBy)
}
