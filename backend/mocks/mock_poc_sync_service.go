// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/poc_sync_service_impl.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/duesk/monstera/internal/model"
	service "github.com/duesk/monstera/internal/service"
	gomock "github.com/golang/mock/gomock"
)

// MockPocSyncService is a mock of PocSyncService interface.
type MockPocSyncService struct {
	ctrl     *gomock.Controller
	recorder *MockPocSyncServiceMockRecorder
}

// MockPocSyncServiceMockRecorder is the mock recorder for MockPocSyncService.
type MockPocSyncServiceMockRecorder struct {
	mock *MockPocSyncService
}

// NewMockPocSyncService creates a new mock instance.
func NewMockPocSyncService(ctrl *gomock.Controller) *MockPocSyncService {
	mock := &MockPocSyncService{ctrl: ctrl}
	mock.recorder = &MockPocSyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPocSyncService) EXPECT() *MockPocSyncServiceMockRecorder {
	return m.recorder
}

// CreateProjectFromPoc mocks base method.
func (m *MockPocSyncService) CreateProjectFromPoc(ctx context.Context, pocProjectID string) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectFromPoc", ctx, pocProjectID)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectFromPoc indicates an expected call of CreateProjectFromPoc.
func (mr *MockPocSyncServiceMockRecorder) CreateProjectFromPoc(ctx, pocProjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectFromPoc", reflect.TypeOf((*MockPocSyncService)(nil).CreateProjectFromPoc), ctx, pocProjectID)
}

// ForceSync mocks base method.
func (m *MockPocSyncService) ForceSync(ctx context.Context, pocProjectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceSync", ctx, pocProjectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceSync indicates an expected call of ForceSync.
func (mr *MockPocSyncServiceMockRecorder) ForceSync(ctx, pocProjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceSync", reflect.TypeOf((*MockPocSyncService)(nil).ForceSync), ctx, pocProjectID)
}

// GetSyncHistory mocks base method.
func (m *MockPocSyncService) GetSyncHistory(ctx context.Context, filter service.SyncHistoryFilter) ([]*service.SyncHistoryEntry, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncHistory", ctx, filter)
	ret0, _ := ret[0].([]*service.SyncHistoryEntry)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSyncHistory indicates an expected call of GetSyncHistory.
func (mr *MockPocSyncServiceMockRecorder) GetSyncHistory(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncHistory", reflect.TypeOf((*MockPocSyncService)(nil).GetSyncHistory), ctx, filter)
}

// GetSyncSettings mocks base method.
func (m *MockPocSyncService) GetSyncSettings(ctx context.Context) (*service.SyncSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncSettings", ctx)
	ret0, _ := ret[0].(*service.SyncSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncSettings indicates an expected call of GetSyncSettings.
func (mr *MockPocSyncServiceMockRecorder) GetSyncSettings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncSettings", reflect.TypeOf((*MockPocSyncService)(nil).GetSyncSettings), ctx)
}

// GetSyncStatus mocks base method.
func (m *MockPocSyncService) GetSyncStatus(ctx context.Context) (*service.SyncStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncStatus", ctx)
	ret0, _ := ret[0].(*service.SyncStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncStatus indicates an expected call of GetSyncStatus.
func (mr *MockPocSyncServiceMockRecorder) GetSyncStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncStatus", reflect.TypeOf((*MockPocSyncService)(nil).GetSyncStatus), ctx)
}

// GetUnsyncedProjects mocks base method.
func (m *MockPocSyncService) GetUnsyncedProjects(ctx context.Context) ([]*model.PocProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsyncedProjects", ctx)
	ret0, _ := ret[0].([]*model.PocProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsyncedProjects indicates an expected call of GetUnsyncedProjects.
func (mr *MockPocSyncServiceMockRecorder) GetUnsyncedProjects(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsyncedProjects", reflect.TypeOf((*MockPocSyncService)(nil).GetUnsyncedProjects), ctx)
}

// RunScheduledSync mocks base method.
func (m *MockPocSyncService) RunScheduledSync(ctx context.Context) (*service.SyncResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunScheduledSync", ctx)
	ret0, _ := ret[0].(*service.SyncResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunScheduledSync indicates an expected call of RunScheduledSync.
func (mr *MockPocSyncServiceMockRecorder) RunScheduledSync(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScheduledSync", reflect.TypeOf((*MockPocSyncService)(nil).RunScheduledSync), ctx)
}

// SyncAllProjects mocks base method.
func (m *MockPocSyncService) SyncAllProjects(ctx context.Context) (*service.SyncResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAllProjects", ctx)
	ret0, _ := ret[0].(*service.SyncResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncAllProjects indicates an expected call of SyncAllProjects.
func (mr *MockPocSyncServiceMockRecorder) SyncAllProjects(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAllProjects", reflect.TypeOf((*MockPocSyncService)(nil).SyncAllProjects), ctx)
}

// SyncProjectByID mocks base method.
func (m *MockPocSyncService) SyncProjectByID(ctx context.Context, pocProjectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncProjectByID", ctx, pocProjectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncProjectByID indicates an expected call of SyncProjectByID.
func (mr *MockPocSyncServiceMockRecorder) SyncProjectByID(ctx, pocProjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncProjectByID", reflect.TypeOf((*MockPocSyncService)(nil).SyncProjectByID), ctx, pocProjectID)
}

// UpdateProjectFromPoc mocks base method.
func (m *MockPocSyncService) UpdateProjectFromPoc(ctx context.Context, projectID, pocProjectID string) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectFromPoc", ctx, projectID, pocProjectID)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectFromPoc indicates an expected call of UpdateProjectFromPoc.
func (mr *MockPocSyncServiceMockRecorder) UpdateProjectFromPoc(ctx, projectID, pocProjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectFromPoc", reflect.TypeOf((*MockPocSyncService)(nil).UpdateProjectFromPoc), ctx, projectID, pocProjectID)
}

// UpdateSyncSettings mocks base method.
func (m *MockPocSyncService) UpdateSyncSettings(ctx context.Context, settings *service.SyncSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncSettings", ctx, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSyncSettings indicates an expected call of UpdateSyncSettings.
func (mr *MockPocSyncServiceMockRecorder) UpdateSyncSettings(ctx, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncSettings", reflect.TypeOf((*MockPocSyncService)(nil).UpdateSyncSettings), ctx, settings)
}
