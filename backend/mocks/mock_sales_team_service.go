// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/sales_team_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/duesk/monstera/internal/model"
	service "github.com/duesk/monstera/internal/service"
	gomock "github.com/golang/mock/gomock"
)

// MockSalesTeamService is a mock of SalesTeamService interface.
type MockSalesTeamService struct {
	ctrl     *gomock.Controller
	recorder *MockSalesTeamServiceMockRecorder
}

// MockSalesTeamServiceMockRecorder is the mock recorder for MockSalesTeamService.
type MockSalesTeamServiceMockRecorder struct {
	mock *MockSalesTeamService
}

// NewMockSalesTeamService creates a new mock instance.
func NewMockSalesTeamService(ctrl *gomock.Controller) *MockSalesTeamService {
	mock := &MockSalesTeamService{ctrl: ctrl}
	mock.recorder = &MockSalesTeamServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalesTeamService) EXPECT() *MockSalesTeamServiceMockRecorder {
	return m.recorder
}

// ActivateMember mocks base method.
func (m *MockSalesTeamService) ActivateMember(ctx context.Context, id, activatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateMember", ctx, id, activatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateMember indicates an expected call of ActivateMember.
func (mr *MockSalesTeamServiceMockRecorder) ActivateMember(ctx, id, activatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateMember", reflect.TypeOf((*MockSalesTeamService)(nil).ActivateMember), ctx, id, activatedBy)
}

// CreateMember mocks base method.
func (m *MockSalesTeamService) CreateMember(ctx context.Context, req *service.CreateSalesTeamMemberRequest) (*model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", ctx, req)
	ret0, _ := ret[0].(*model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockSalesTeamServiceMockRecorder) CreateMember(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockSalesTeamService)(nil).CreateMember), ctx, req)
}

// DeactivateMember mocks base method.
func (m *MockSalesTeamService) DeactivateMember(ctx context.Context, id, deactivatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateMember", ctx, id, deactivatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateMember indicates an expected call of DeactivateMember.
func (mr *MockSalesTeamServiceMockRecorder) DeactivateMember(ctx, id, deactivatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateMember", reflect.TypeOf((*MockSalesTeamService)(nil).DeactivateMember), ctx, id, deactivatedBy)
}

// DeleteMember mocks base method.
func (m *MockSalesTeamService) DeleteMember(ctx context.Context, id, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", ctx, id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockSalesTeamServiceMockRecorder) DeleteMember(ctx, id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockSalesTeamService)(nil).DeleteMember), ctx, id, deletedBy)
}

// GetActiveMembers mocks base method.
func (m *MockSalesTeamService) GetActiveMembers(ctx context.Context) ([]*model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMembers", ctx)
	ret0, _ := ret[0].([]*model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveMembers indicates an expected call of GetActiveMembers.
func (mr *MockSalesTeamServiceMockRecorder) GetActiveMembers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMembers", reflect.TypeOf((*MockSalesTeamService)(nil).GetActiveMembers), ctx)
}

// GetMemberByID mocks base method.
func (m *MockSalesTeamService) GetMemberByID(ctx context.Context, id string) (*model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByID", ctx, id)
	ret0, _ := ret[0].(*model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByID indicates an expected call of GetMemberByID.
func (mr *MockSalesTeamServiceMockRecorder) GetMemberByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByID", reflect.TypeOf((*MockSalesTeamService)(nil).GetMemberByID), ctx, id)
}

// GetMemberByUserID mocks base method.
func (m *MockSalesTeamService) GetMemberByUserID(ctx context.Context, userID string) (*model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByUserID", ctx, userID)
	ret0, _ := ret[0].(*model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByUserID indicates an expected call of GetMemberByUserID.
func (mr *MockSalesTeamServiceMockRecorder) GetMemberByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByUserID", reflect.TypeOf((*MockSalesTeamService)(nil).GetMemberByUserID), ctx, userID)
}

// GetMemberList mocks base method.
func (m *MockSalesTeamService) GetMemberList(ctx context.Context, filter service.GetSalesTeamMemberFilter) (*service.SalesTeamMemberListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberList", ctx, filter)
	ret0, _ := ret[0].(*service.SalesTeamMemberListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberList indicates an expected call of GetMemberList.
func (mr *MockSalesTeamServiceMockRecorder) GetMemberList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberList", reflect.TypeOf((*MockSalesTeamService)(nil).GetMemberList), ctx, filter)
}

// GetMembersByRole mocks base method.
func (m *MockSalesTeamService) GetMembersByRole(ctx context.Context, role string) ([]*model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersByRole", ctx, role)
	ret0, _ := ret[0].([]*model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersByRole indicates an expected call of GetMembersByRole.
func (mr *MockSalesTeamServiceMockRecorder) GetMembersByRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersByRole", reflect.TypeOf((*MockSalesTeamService)(nil).GetMembersByRole), ctx, role)
}

// GetTeamStatistics mocks base method.
func (m *MockSalesTeamService) GetTeamStatistics(ctx context.Context) (*service.SalesTeamStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamStatistics", ctx)
	ret0, _ := ret[0].(*service.SalesTeamStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamStatistics indicates an expected call of GetTeamStatistics.
func (mr *MockSalesTeamServiceMockRecorder) GetTeamStatistics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamStatistics", reflect.TypeOf((*MockSalesTeamService)(nil).GetTeamStatistics), ctx)
}

// UpdateMember mocks base method.
func (m *MockSalesTeamService) UpdateMember(ctx context.Context, id string, req *service.UpdateSalesTeamMemberRequest) (*model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", ctx, id, req)
	ret0, _ := ret[0].(*model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockSalesTeamServiceMockRecorder) UpdateMember(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockSalesTeamService)(nil).UpdateMember), ctx, id, req)
}
