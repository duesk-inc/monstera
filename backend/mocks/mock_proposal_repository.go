// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/proposal_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/duesk/monstera/internal/model"
	repository "github.com/duesk/monstera/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockProposalRepository is a mock of ProposalRepository interface.
type MockProposalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProposalRepositoryMockRecorder
}

// MockProposalRepositoryMockRecorder is the mock recorder for MockProposalRepository.
type MockProposalRepositoryMockRecorder struct {
	mock *MockProposalRepository
}

// NewMockProposalRepository creates a new mock instance.
func NewMockProposalRepository(ctrl *gomock.Controller) *MockProposalRepository {
	mock := &MockProposalRepository{ctrl: ctrl}
	mock.recorder = &MockProposalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposalRepository) EXPECT() *MockProposalRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProposalRepository) Create(ctx context.Context, proposal *model.Proposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, proposal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProposalRepositoryMockRecorder) Create(ctx, proposal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProposalRepository)(nil).Create), ctx, proposal)
}

// Delete mocks base method.
func (m *MockProposalRepository) Delete(ctx context.Context, id, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProposalRepositoryMockRecorder) Delete(ctx, id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProposalRepository)(nil).Delete), ctx, id, deletedBy)
}

// GetByClient mocks base method.
func (m *MockProposalRepository) GetByClient(ctx context.Context, clientID string) ([]model.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClient", ctx, clientID)
	ret0, _ := ret[0].([]model.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClient indicates an expected call of GetByClient.
func (mr *MockProposalRepositoryMockRecorder) GetByClient(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClient", reflect.TypeOf((*MockProposalRepository)(nil).GetByClient), ctx, clientID)
}

// GetByEngineer mocks base method.
func (m *MockProposalRepository) GetByEngineer(ctx context.Context, engineerID string) ([]model.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEngineer", ctx, engineerID)
	ret0, _ := ret[0].([]model.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEngineer indicates an expected call of GetByEngineer.
func (mr *MockProposalRepositoryMockRecorder) GetByEngineer(ctx, engineerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEngineer", reflect.TypeOf((*MockProposalRepository)(nil).GetByEngineer), ctx, engineerID)
}

// GetByID mocks base method.
func (m *MockProposalRepository) GetByID(ctx context.Context, id string) (*model.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProposalRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProposalRepository)(nil).GetByID), ctx, id)
}

// GetExpiredProposals mocks base method.
func (m *MockProposalRepository) GetExpiredProposals(ctx context.Context) ([]model.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredProposals", ctx)
	ret0, _ := ret[0].([]model.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredProposals indicates an expected call of GetExpiredProposals.
func (mr *MockProposalRepositoryMockRecorder) GetExpiredProposals(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredProposals", reflect.TypeOf((*MockProposalRepository)(nil).GetExpiredProposals), ctx)
}

// GetList mocks base method.
func (m *MockProposalRepository) GetList(ctx context.Context, filter repository.ProposalFilter) ([]model.Proposal, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter)
	ret0, _ := ret[0].([]model.Proposal)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockProposalRepositoryMockRecorder) GetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockProposalRepository)(nil).GetList), ctx, filter)
}

// GetPendingProposals mocks base method.
func (m *MockProposalRepository) GetPendingProposals(ctx context.Context, days int) ([]model.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingProposals", ctx, days)
	ret0, _ := ret[0].([]model.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingProposals indicates an expected call of GetPendingProposals.
func (mr *MockProposalRepositoryMockRecorder) GetPendingProposals(ctx, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingProposals", reflect.TypeOf((*MockProposalRepository)(nil).GetPendingProposals), ctx, days)
}

// Update mocks base method.
func (m *MockProposalRepository) Update(ctx context.Context, proposal *model.Proposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, proposal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProposalRepositoryMockRecorder) Update(ctx, proposal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProposalRepository)(nil).Update), ctx, proposal)
}

// UpdateStatus mocks base method.
func (m *MockProposalRepository) UpdateStatus(ctx context.Context, id string, status model.ProposalStatus, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockProposalRepositoryMockRecorder) UpdateStatus(ctx, id, status, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockProposalRepository)(nil).UpdateStatus), ctx, id, status, updatedBy)
}
