// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// SendSMSCode mocks base method.
func (m *MockAuthService) SendSMSCode(phoneNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSMSCode", phoneNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSMSCode indicates an expected call of SendSMSCode.
func (mr *MockAuthServiceMockRecorder) SendSMSCode(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSMSCode", reflect.TypeOf((*MockAuthService)(nil).SendSMSCode), phoneNumber)
}

// UseBackupCode mocks base method.
func (m *MockAuthService) UseBackupCode(userID, backupCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseBackupCode", userID, backupCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseBackupCode indicates an expected call of UseBackupCode.
func (mr *MockAuthServiceMockRecorder) UseBackupCode(userID, backupCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseBackupCode", reflect.TypeOf((*MockAuthService)(nil).UseBackupCode), userID, backupCode)
}

// ValidateTOTP mocks base method.
func (m *MockAuthService) ValidateTOTP(userID, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTOTP", userID, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTOTP indicates an expected call of ValidateTOTP.
func (mr *MockAuthServiceMockRecorder) ValidateTOTP(userID, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTOTP", reflect.TypeOf((*MockAuthService)(nil).ValidateTOTP), userID, code)
}

// VerifySMSCode mocks base method.
func (m *MockAuthService) VerifySMSCode(verificationID, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySMSCode", verificationID, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySMSCode indicates an expected call of VerifySMSCode.
func (mr *MockAuthServiceMockRecorder) VerifySMSCode(verificationID, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySMSCode", reflect.TypeOf((*MockAuthService)(nil).VerifySMSCode), verificationID, code)
}
