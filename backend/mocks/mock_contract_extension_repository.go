// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/contract_extension_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/duesk/monstera/internal/model"
	repository "github.com/duesk/monstera/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockContractExtensionRepository is a mock of ContractExtensionRepository interface.
type MockContractExtensionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContractExtensionRepositoryMockRecorder
}

// MockContractExtensionRepositoryMockRecorder is the mock recorder for MockContractExtensionRepository.
type MockContractExtensionRepositoryMockRecorder struct {
	mock *MockContractExtensionRepository
}

// NewMockContractExtensionRepository creates a new mock instance.
func NewMockContractExtensionRepository(ctrl *gomock.Controller) *MockContractExtensionRepository {
	mock := &MockContractExtensionRepository{ctrl: ctrl}
	mock.recorder = &MockContractExtensionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractExtensionRepository) EXPECT() *MockContractExtensionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContractExtensionRepository) Create(ctx context.Context, extension *model.ContractExtension) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, extension)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockContractExtensionRepositoryMockRecorder) Create(ctx, extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContractExtensionRepository)(nil).Create), ctx, extension)
}

// Delete mocks base method.
func (m *MockContractExtensionRepository) Delete(ctx context.Context, id, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContractExtensionRepositoryMockRecorder) Delete(ctx, id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContractExtensionRepository)(nil).Delete), ctx, id, deletedBy)
}

// GetByEngineer mocks base method.
func (m *MockContractExtensionRepository) GetByEngineer(ctx context.Context, engineerID string) ([]model.ContractExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEngineer", ctx, engineerID)
	ret0, _ := ret[0].([]model.ContractExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEngineer indicates an expected call of GetByEngineer.
func (mr *MockContractExtensionRepositoryMockRecorder) GetByEngineer(ctx, engineerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEngineer", reflect.TypeOf((*MockContractExtensionRepository)(nil).GetByEngineer), ctx, engineerID)
}

// GetByID mocks base method.
func (m *MockContractExtensionRepository) GetByID(ctx context.Context, id string) (*model.ContractExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.ContractExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockContractExtensionRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockContractExtensionRepository)(nil).GetByID), ctx, id)
}

// GetByProject mocks base method.
func (m *MockContractExtensionRepository) GetByProject(ctx context.Context, projectID string) ([]model.ContractExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProject", ctx, projectID)
	ret0, _ := ret[0].([]model.ContractExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProject indicates an expected call of GetByProject.
func (mr *MockContractExtensionRepositoryMockRecorder) GetByProject(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProject", reflect.TypeOf((*MockContractExtensionRepository)(nil).GetByProject), ctx, projectID)
}

// GetList mocks base method.
func (m *MockContractExtensionRepository) GetList(ctx context.Context, filter repository.ContractExtensionFilter) ([]model.ContractExtension, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter)
	ret0, _ := ret[0].([]model.ContractExtension)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockContractExtensionRepositoryMockRecorder) GetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockContractExtensionRepository)(nil).GetList), ctx, filter)
}

// GetPendingExtensions mocks base method.
func (m *MockContractExtensionRepository) GetPendingExtensions(ctx context.Context) ([]model.ContractExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingExtensions", ctx)
	ret0, _ := ret[0].([]model.ContractExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingExtensions indicates an expected call of GetPendingExtensions.
func (mr *MockContractExtensionRepositoryMockRecorder) GetPendingExtensions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingExtensions", reflect.TypeOf((*MockContractExtensionRepository)(nil).GetPendingExtensions), ctx)
}

// GetUpcomingExtensions mocks base method.
func (m *MockContractExtensionRepository) GetUpcomingExtensions(ctx context.Context, days int) ([]model.ContractExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingExtensions", ctx, days)
	ret0, _ := ret[0].([]model.ContractExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingExtensions indicates an expected call of GetUpcomingExtensions.
func (mr *MockContractExtensionRepositoryMockRecorder) GetUpcomingExtensions(ctx, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingExtensions", reflect.TypeOf((*MockContractExtensionRepository)(nil).GetUpcomingExtensions), ctx, days)
}

// Update mocks base method.
func (m *MockContractExtensionRepository) Update(ctx context.Context, extension *model.ContractExtension) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, extension)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockContractExtensionRepositoryMockRecorder) Update(ctx, extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContractExtensionRepository)(nil).Update), ctx, extension)
}

// UpdateStatus mocks base method.
func (m *MockContractExtensionRepository) UpdateStatus(ctx context.Context, id string, status model.ContractExtensionStatus, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockContractExtensionRepositoryMockRecorder) UpdateStatus(ctx, id, status, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockContractExtensionRepository)(nil).UpdateStatus), ctx, id, status, updatedBy)
}
