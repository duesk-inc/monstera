// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/sales_team_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/duesk/monstera/internal/model"
	repository "github.com/duesk/monstera/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockSalesTeamRepository is a mock of SalesTeamRepository interface.
type MockSalesTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSalesTeamRepositoryMockRecorder
}

// MockSalesTeamRepositoryMockRecorder is the mock recorder for MockSalesTeamRepository.
type MockSalesTeamRepositoryMockRecorder struct {
	mock *MockSalesTeamRepository
}

// NewMockSalesTeamRepository creates a new mock instance.
func NewMockSalesTeamRepository(ctrl *gomock.Controller) *MockSalesTeamRepository {
	mock := &MockSalesTeamRepository{ctrl: ctrl}
	mock.recorder = &MockSalesTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalesTeamRepository) EXPECT() *MockSalesTeamRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSalesTeamRepository) Create(ctx context.Context, member *model.SalesTeam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSalesTeamRepositoryMockRecorder) Create(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSalesTeamRepository)(nil).Create), ctx, member)
}

// Delete mocks base method.
func (m *MockSalesTeamRepository) Delete(ctx context.Context, id, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSalesTeamRepositoryMockRecorder) Delete(ctx, id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSalesTeamRepository)(nil).Delete), ctx, id, deletedBy)
}

// GetActiveMembers mocks base method.
func (m *MockSalesTeamRepository) GetActiveMembers(ctx context.Context) ([]model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMembers", ctx)
	ret0, _ := ret[0].([]model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveMembers indicates an expected call of GetActiveMembers.
func (mr *MockSalesTeamRepositoryMockRecorder) GetActiveMembers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMembers", reflect.TypeOf((*MockSalesTeamRepository)(nil).GetActiveMembers), ctx)
}

// GetByID mocks base method.
func (m *MockSalesTeamRepository) GetByID(ctx context.Context, id string) (*model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSalesTeamRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSalesTeamRepository)(nil).GetByID), ctx, id)
}

// GetByRole mocks base method.
func (m *MockSalesTeamRepository) GetByRole(ctx context.Context, role string) ([]model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRole", ctx, role)
	ret0, _ := ret[0].([]model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRole indicates an expected call of GetByRole.
func (mr *MockSalesTeamRepositoryMockRecorder) GetByRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRole", reflect.TypeOf((*MockSalesTeamRepository)(nil).GetByRole), ctx, role)
}

// GetByUserID mocks base method.
func (m *MockSalesTeamRepository) GetByUserID(ctx context.Context, userID string) (*model.SalesTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(*model.SalesTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockSalesTeamRepositoryMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockSalesTeamRepository)(nil).GetByUserID), ctx, userID)
}

// GetList mocks base method.
func (m *MockSalesTeamRepository) GetList(ctx context.Context, filter repository.SalesTeamFilter) ([]model.SalesTeam, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter)
	ret0, _ := ret[0].([]model.SalesTeam)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockSalesTeamRepositoryMockRecorder) GetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockSalesTeamRepository)(nil).GetList), ctx, filter)
}

// Update mocks base method.
func (m *MockSalesTeamRepository) Update(ctx context.Context, member *model.SalesTeam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSalesTeamRepositoryMockRecorder) Update(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSalesTeamRepository)(nil).Update), ctx, member)
}

// UpdateStatus mocks base method.
func (m *MockSalesTeamRepository) UpdateStatus(ctx context.Context, id string, isActive bool, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, isActive, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockSalesTeamRepositoryMockRecorder) UpdateStatus(ctx, id, isActive, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockSalesTeamRepository)(nil).UpdateStatus), ctx, id, isActive, updatedBy)
}
