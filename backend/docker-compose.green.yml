version: '3.8'

services:
  # Green環境用PostgreSQLデータベース
  postgres-green:
    image: postgres:15
    container_name: monstera-postgres-green
    environment:
      POSTGRES_DB: monstera_green
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      TZ: Asia/Tokyo
    ports:
      - "5433:5432"  # 別ポートで起動（Blue環境と共存のため）
    volumes:
      - postgres_green_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql-green.conf:/etc/postgresql/postgresql.conf
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - monstera-green

  # Green環境用バックエンドAPI
  backend-green:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - DB_TYPE=postgresql
    container_name: monstera-backend-green
    environment:
      # データベース設定
      DB_HOST: postgres-green
      DB_PORT: 5432
      DB_NAME: monstera_green
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_DRIVER: postgres
      
      # アプリケーション設定
      APP_ENV: green
      APP_PORT: 8080
      JWT_SECRET: ${JWT_SECRET}
      
      # 機能フラグ
      USE_POSTGRESQL: "true"
      ENABLE_DUAL_WRITE: ${ENABLE_DUAL_WRITE:-false}
      
      # ログ設定
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
    ports:
      - "8081:8080"  # 別ポートで起動
    depends_on:
      postgres-green:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - go_modules_green:/go/pkg/mod
    networks:
      - monstera-green
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # データ同期ツール（Debezium）
  debezium:
    image: debezium/connect:2.4
    container_name: monstera-debezium
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: monstera-sync
      CONFIG_STORAGE_TOPIC: monstera_connect_configs
      OFFSET_STORAGE_TOPIC: monstera_connect_offsets
      STATUS_STORAGE_TOPIC: monstera_connect_statuses
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - postgres-green
    networks:
      - monstera-green
      - monstera-blue  # Blue環境のMySQLにもアクセス必要

  # Kafka（Debezium用）
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: monstera-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - monstera-green

  # Zookeeper（Kafka用）
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: monstera-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - monstera-green

  # pgAdmin（Green環境管理用）
  pgadmin-green:
    image: dpage/pgadmin4:latest
    container_name: monstera-pgadmin-green
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@monstera.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8082:80"
    volumes:
      - pgadmin_green_data:/var/lib/pgadmin
    networks:
      - monstera-green
    depends_on:
      - postgres-green

  # Nginx（Blue-Greenトラフィック制御用）
  nginx-lb:
    image: nginx:alpine
    container_name: monstera-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx-bluegreen.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - monstera-blue
      - monstera-green
    depends_on:
      - backend-green

  # Prometheus（メトリクス収集）
  prometheus:
    image: prom/prometheus:latest
    container_name: monstera-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus-bluegreen.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus-bluegreen.yml:/etc/prometheus/prometheus-bluegreen.yml
      - prometheus_data:/prometheus
    networks:
      - monstera-blue
      - monstera-green

  # Grafana（モニタリング）
  grafana:
    image: grafana/grafana:latest
    container_name: monstera-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - monstera-blue
      - monstera-green
    depends_on:
      - prometheus

volumes:
  postgres_green_data:
  go_modules_green:
  pgadmin_green_data:
  prometheus_data:
  grafana_data:

networks:
  monstera-green:
    driver: bridge
  monstera-blue:
    external: true  # Blue環境のネットワークと接続