# Monstera テスト環境用 PostgreSQL Docker Compose
# テスト用PostgreSQLコンテナとテストデータ投入機能

services:
  # PostgreSQLデータベース（テスト環境用）
  postgres-test:
    image: postgres:15-alpine
    platform: linux/arm64/v8
    container_name: monstera-postgres-test
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-monstera_test}
      POSTGRES_USER: ${POSTGRES_USER:-monstera}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_ROOT_PASSWORD: ${POSTGRES_ROOT_PASSWORD:-root}
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: Asia/Tokyo
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./scripts/test-data:/test-data:ro
    networks:
      - monstera-test-network
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-monstera} -d ${POSTGRES_DB:-monstera_test}"]
      interval: 10s
      timeout: 5s
      retries: 20

  # pgAdmin - PostgreSQL管理用WebUI（テスト環境用）
  pgadmin-test:
    image: dpage/pgadmin4:latest
    platform: linux/arm64/v8
    container_name: monstera-pgadmin-test
    restart: unless-stopped
    depends_on:
      postgres-test:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@monstera.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-password}
      PGADMIN_LISTEN_PORT: 80
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'False'
      PGADMIN_CONFIG_LOGIN_BANNER: '"PostgreSQL Test Environment for Monstera"'
    ports:
      - "${PGADMIN_PORT:-8082}:80"
    volumes:
      - pgadmin_test_data:/var/lib/pgadmin
      - ./docker/postgres/pgadmin-servers.json:/pgadmin4/servers.json:ro
    networks:
      - monstera-test-network
    profiles:
      - admin

  # Redisキャッシュサーバー（テスト環境用）
  redis-test:
    image: redis:7-alpine
    platform: linux/arm64/v8
    container_name: monstera-redis-test
    restart: unless-stopped
    ports:
      - "${REDIS_TEST_PORT:-6380}:6379"
    volumes:
      - redis_test_data:/data
    networks:
      - monstera-test-network
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-testpassword}"

  # バックエンドAPI（テスト環境用）
  backend-test:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      platforms:
        - linux/arm64/v8
    container_name: monstera-backend-test
    restart: unless-stopped
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_started
    environment:
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-monstera_test}
      DB_USER: ${POSTGRES_USER:-monstera}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      DB_DRIVER: postgres
      DB_SSL_MODE: disable
      JWT_SECRET: ${JWT_SECRET:-test_jwt_secret}
      PORT: 8080
      CORS_ALLOW_ORIGINS: http://localhost:3001
      GIN_MODE: debug
      GO_ENV: test
      REDIS_ENABLED: "true"
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-testpassword}
      REDIS_DB: 1
      REDIS_KEY_PREFIX: "monstera_test:"
      LOG_LEVEL: debug
      CHROME_PATH: /usr/bin/google-chrome
      PDF_GENERATION_TIMEOUT: 30
      TEMPLATE_DIR: /app/templates
      TZ: Asia/Tokyo
    ports:
      - "${API_TEST_PORT:-8081}:8080"
    volumes:
      - ./backend:/app
      - ./backend/templates:/app/templates
      - ./test-data:/test-data:ro
    networks:
      - monstera-test-network
    command: sh ./entrypoint-test.sh
    profiles:
      - backend

  # フロントエンド（テスト環境用）
  frontend-test:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
      platforms:
        - linux/arm64/v8
    container_name: monstera-frontend-test
    restart: unless-stopped
    depends_on:
      - backend-test
    environment:
      # ブラウザ用のAPI URL (localhost経由でアクセス)
      - NEXT_PUBLIC_API_URL=http://localhost:${API_TEST_PORT:-8081}
      # Next.js サーバー側のAPI URL (コンテナ間通信用)
      - NEXT_SERVER_API_URL=http://backend-test:8080
      # 環境設定
      - NODE_ENV=test
      - NEXT_TELEMETRY_DISABLED=1
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "${FRONTEND_TEST_PORT:-3001}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - monstera-test-network
    profiles:
      - frontend

  # データ投入・テスト実行コンテナ
  test-runner:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      platforms:
        - linux/arm64/v8
    container_name: monstera-test-runner
    restart: "no"  # 手動実行用
    depends_on:
      postgres-test:
        condition: service_healthy
    environment:
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-monstera_test}
      DB_USER: ${POSTGRES_USER:-monstera}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      DB_DRIVER: postgres
      DB_SSL_MODE: disable
      GO_ENV: test
      TZ: Asia/Tokyo
    volumes:
      - ./backend:/app
      - ./scripts:/scripts:ro
      - ./test-data:/test-data:rw
      - ./backend/migrations:/migrations:ro
      - test_results:/test-results:rw
    networks:
      - monstera-test-network
    working_dir: /app
    command: ["sleep", "infinity"]  # デフォルトは待機状態
    profiles:
      - test

networks:
  monstera-test-network:
    driver: bridge
    name: monstera-test-network

volumes:
  postgres_test_data:
    name: monstera_postgres_test_data
  pgadmin_test_data:
    name: monstera_pgadmin_test_data
  redis_test_data:
    name: monstera_redis_test_data
  test_results:
    name: monstera_test_results